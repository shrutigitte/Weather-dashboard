{"ast":null,"code":"var _jsxFileName = \"/Users/shrutigitte/Desktop/weather/weather-dashboard/src/WeatherDisplay.jsx\";\n// src/components/WeatherDisplay.jsx\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherDisplay = ({\n  weather\n}) => {\n  // Function to determine the background color based on weather conditions\n  const getBackgroundColor = () => {\n    if (!weather) return '';\n    const weatherCondition = weather.weather[0].main;\n    switch (weatherCondition) {\n      case 'Rain':\n        return 'bg-blue-500';\n      // Bluish color for rainy weather\n      case 'Clear':\n        return 'bg-yellow-400';\n      // Sunny color\n      case 'Clouds':\n        return 'bg-sky-300';\n      // Light gray for cloudy weather\n      case 'Snow':\n        return 'bg-white text-black';\n      // White for snowy weather\n      case 'Drizzle':\n        return 'bg-teal-300';\n      // Teal color for drizzle\n      default:\n        return 'bg-sky-300';\n      // Default background color\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `w-full max-w-md p-4 rounded-lg shadow-lg ${getBackgroundColor()}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-2\",\n      children: weather.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Humidity: \", weather.main.humidity, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Wind Speed: \", weather.wind.speed, \" m/s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Condition: \", weather.weather[0].description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = WeatherDisplay;\nexport default WeatherDisplay;\nvar _c;\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","WeatherDisplay","weather","getBackgroundColor","weatherCondition","main","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","temp","humidity","wind","speed","description","_c","$RefreshReg$"],"sources":["/Users/shrutigitte/Desktop/weather/weather-dashboard/src/WeatherDisplay.jsx"],"sourcesContent":["// src/components/WeatherDisplay.jsx\nimport React from 'react';\n\nconst WeatherDisplay = ({ weather }) => {\n  // Function to determine the background color based on weather conditions\n  const getBackgroundColor = () => {\n    if (!weather) return '';\n\n    const weatherCondition = weather.weather[0].main;\n    switch (weatherCondition) {\n      case 'Rain':\n        return 'bg-blue-500'; // Bluish color for rainy weather\n      case 'Clear':\n        return 'bg-yellow-400'; // Sunny color\n      case 'Clouds':\n        return 'bg-sky-300'; // Light gray for cloudy weather\n      case 'Snow':\n        return 'bg-white text-black'; // White for snowy weather\n      case 'Drizzle':\n        return 'bg-teal-300'; // Teal color for drizzle\n      default:\n        return 'bg-sky-300'; // Default background color\n    }\n  };\n\n  return (\n    <div\n      className={`w-full max-w-md p-4 rounded-lg shadow-lg ${getBackgroundColor()}`}\n    >\n      <h2 className=\"text-3xl font-bold mb-2\">{weather.name}</h2>\n      <p className=\"text-xl\">Temperature: {weather.main.temp}Â°C</p>\n      <p className=\"text-xl\">Humidity: {weather.main.humidity}%</p>\n      <p className=\"text-xl\">Wind Speed: {weather.wind.speed} m/s</p>\n      <p className=\"text-xl\">Condition: {weather.weather[0].description}</p>\n    </div>\n  );\n};\n\nexport default WeatherDisplay;\n\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EACtC;EACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAACD,OAAO,EAAE,OAAO,EAAE;IAEvB,MAAME,gBAAgB,GAAGF,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACG,IAAI;IAChD,QAAQD,gBAAgB;MACtB,KAAK,MAAM;QACT,OAAO,aAAa;MAAE;MACxB,KAAK,OAAO;QACV,OAAO,eAAe;MAAE;MAC1B,KAAK,QAAQ;QACX,OAAO,YAAY;MAAE;MACvB,KAAK,MAAM;QACT,OAAO,qBAAqB;MAAE;MAChC,KAAK,SAAS;QACZ,OAAO,aAAa;MAAE;MACxB;QACE,OAAO,YAAY;MAAE;IACzB;EACF,CAAC;EAED,oBACEJ,OAAA;IACEM,SAAS,EAAE,4CAA4CH,kBAAkB,CAAC,CAAC,EAAG;IAAAI,QAAA,gBAE9EP,OAAA;MAAIM,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAEL,OAAO,CAACM;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC3DZ,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAC,eAAa,EAACL,OAAO,CAACG,IAAI,CAACQ,IAAI,EAAC,OAAE;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7DZ,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAC,YAAU,EAACL,OAAO,CAACG,IAAI,CAACS,QAAQ,EAAC,GAAC;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7DZ,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAC,cAAY,EAACL,OAAO,CAACa,IAAI,CAACC,KAAK,EAAC,MAAI;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC/DZ,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAC,aAAW,EAACL,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACe,WAAW;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAACM,EAAA,GAjCIjB,cAAc;AAmCpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}