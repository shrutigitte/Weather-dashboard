{"ast":null,"code":"var _jsxFileName = \"/Users/shrutigitte/Desktop/weather/weather-dashboard/src/WeatherDisplay.jsx\";\n// src/components/WeatherDisplay.jsx\nimport React from 'react';\nimport rainyImage from './images/Rainy.jpeg';\nimport sunnyImage from './images/Sunny.jpeg';\nimport cloudyImage from './images/Cloudy.webp';\nimport snowyImage from './images/Snow.webp';\nimport drizzleImage from './images/Drizzle.avif';\nimport defaultImage from './images/default.avif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherDisplay = ({\n  weather\n}) => {\n  // Function to determine the background image based on weather conditions\n  const getBackgroundImage = () => {\n    if (!weather || !weather.weather || !weather.weather[0]) return '';\n    const weatherCondition = weather.weather[0].main;\n    switch (weatherCondition) {\n      case 'Rain':\n        return 'url(${rainyImage})';\n      case 'Clear':\n        return 'url(${sunnyImage})';\n      case 'Clouds':\n        return 'url(${cloudyImage})';\n      case 'Snow':\n        return 'url(${snowyImage})';\n      case 'Drizzle':\n        return 'url(${drizzleImage})';\n      default:\n        return 'url(${defaultImage})';\n      // Fallback image\n    }\n  };\n\n  // Early return if weather data is not available\n  if (!weather) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-md p-4 rounded-lg shadow-lg bg-cover bg-center\",\n    style: {\n      backgroundImage: getBackgroundImage(),\n      height: '300px',\n      // Debugging height\n      backgroundSize: 'cover',\n      // Ensure the image covers the element\n      backgroundPosition: 'center' // Center the background image\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-2\",\n      children: weather.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Humidity: \", weather.main.humidity, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Wind Speed: \", weather.wind.speed, \" m/s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: [\"Condition: \", weather.weather[0].description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c = WeatherDisplay;\nexport default WeatherDisplay;\nvar _c;\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"names":["React","rainyImage","sunnyImage","cloudyImage","snowyImage","drizzleImage","defaultImage","jsxDEV","_jsxDEV","WeatherDisplay","weather","getBackgroundImage","weatherCondition","main","className","style","backgroundImage","height","backgroundSize","backgroundPosition","children","name","fileName","_jsxFileName","lineNumber","columnNumber","temp","humidity","wind","speed","description","_c","$RefreshReg$"],"sources":["/Users/shrutigitte/Desktop/weather/weather-dashboard/src/WeatherDisplay.jsx"],"sourcesContent":["// src/components/WeatherDisplay.jsx\nimport React from 'react';\nimport rainyImage from './images/Rainy.jpeg';\nimport sunnyImage from './images/Sunny.jpeg';\nimport cloudyImage from './images/Cloudy.webp';\nimport snowyImage from './images/Snow.webp';\nimport drizzleImage from './images/Drizzle.avif';\nimport defaultImage from './images/default.avif';\n\nconst WeatherDisplay = ({ weather }) => {\n  // Function to determine the background image based on weather conditions\n  const getBackgroundImage = () => {\n    if (!weather || !weather.weather || !weather.weather[0]) return '';\n\n    const weatherCondition = weather.weather[0].main;\n    switch (weatherCondition) {\n      case 'Rain':\n        return 'url(${rainyImage})';\n      case 'Clear':\n        return 'url(${sunnyImage})';\n      case 'Clouds':\n        return 'url(${cloudyImage})';\n      case 'Snow':\n        return 'url(${snowyImage})';\n      case 'Drizzle':\n        return 'url(${drizzleImage})';\n      default:\n        return 'url(${defaultImage})'; // Fallback image\n    }\n  };\n\n  // Early return if weather data is not available\n  if (!weather) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"w-full max-w-md p-4 rounded-lg shadow-lg bg-cover bg-center\"\n      style={{ backgroundImage: getBackgroundImage() ,\n        height: '300px', // Debugging height\n        backgroundSize: 'cover', // Ensure the image covers the element\n        backgroundPosition: 'center', // Center the background image\n       }}\n    >\n      <h2 className=\"text-3xl font-bold mb-2\">{weather.name}</h2>\n      <p className=\"text-xl\">Temperature: {weather.main.temp}Â°C</p>\n      <p className=\"text-xl\">Humidity: {weather.main.humidity}%</p>\n      <p className=\"text-xl\">Wind Speed: {weather.wind.speed} m/s</p>\n      <p className=\"text-xl\">Condition: {weather.weather[0].description}</p>\n    </div>\n  );\n};\n\nexport default WeatherDisplay;\n\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,YAAY,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EACtC;EACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAACD,OAAO,IAAI,CAACA,OAAO,CAACA,OAAO,IAAI,CAACA,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE;IAElE,MAAME,gBAAgB,GAAGF,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACG,IAAI;IAChD,QAAQD,gBAAgB;MACtB,KAAK,MAAM;QACT,OAAO,oBAAoB;MAC7B,KAAK,OAAO;QACV,OAAO,oBAAoB;MAC7B,KAAK,QAAQ;QACX,OAAO,qBAAqB;MAC9B,KAAK,MAAM;QACT,OAAO,oBAAoB;MAC7B,KAAK,SAAS;QACZ,OAAO,sBAAsB;MAC/B;QACE,OAAO,sBAAsB;MAAE;IACnC;EACF,CAAC;;EAED;EACA,IAAI,CAACF,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,oBACEF,OAAA;IACEM,SAAS,EAAC,6DAA6D;IACvEC,KAAK,EAAE;MAAEC,eAAe,EAAEL,kBAAkB,CAAC,CAAC;MAC5CM,MAAM,EAAE,OAAO;MAAE;MACjBC,cAAc,EAAE,OAAO;MAAE;MACzBC,kBAAkB,EAAE,QAAQ,CAAE;IAC/B,CAAE;IAAAC,QAAA,gBAEHZ,OAAA;MAAIM,SAAS,EAAC,yBAAyB;MAAAM,QAAA,EAAEV,OAAO,CAACW;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC3DjB,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAM,QAAA,GAAC,eAAa,EAACV,OAAO,CAACG,IAAI,CAACa,IAAI,EAAC,OAAE;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7DjB,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAM,QAAA,GAAC,YAAU,EAACV,OAAO,CAACG,IAAI,CAACc,QAAQ,EAAC,GAAC;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7DjB,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAM,QAAA,GAAC,cAAY,EAACV,OAAO,CAACkB,IAAI,CAACC,KAAK,EAAC,MAAI;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC/DjB,OAAA;MAAGM,SAAS,EAAC,SAAS;MAAAM,QAAA,GAAC,aAAW,EAACV,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACoB,WAAW;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAACM,EAAA,GA3CItB,cAAc;AA6CpB,eAAeA,cAAc;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}